import logging
from datetime import datetime, timedelta
from newsapi import NewsApiClient as ApiClient
from typing import List, Dict, Any, Optional

# –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–º–µ –Ω—É–∂–Ω–∏—Ç–µ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏ –æ—Ç —Ç–≤–æ—è config —Ñ–∞–π–ª
from config import NEWSAPI_API_KEY, ASSETS_TO_TRACK 

# –ù–∞—Å—Ç—Ä–æ–π–≤–∞–º–µ –ª–æ–≥—ä—Ä
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ü—Ä–µ–º–µ—Å—Ç–≤–∞–º–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞—Ç–∞ —Ç—É–∫, –∑–∞ –¥–∞ –µ –Ω–∞ –µ–¥–Ω–æ –º—è—Å—Ç–æ
ECONOMIC_NEWS_SOURCES = 'bloomberg,reuters,the-wall-street-journal,financial-times'

class NewsApiClient:
    def __init__(self):
        if not NEWSAPI_API_KEY:
            logging.error("‚ùå NewsAPI –∫–ª—é—á—ä—Ç –Ω–µ –µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω!")
            raise ValueError("NewsAPI –∫–ª—é—á—ä—Ç –Ω–µ –µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω –≤ .env —Ñ–∞–π–ª–∞.")
        self.api = ApiClient(api_key=NEWSAPI_API_KEY)
        logging.info("üì∞ NewsAPI Client initialized successfully.")

    def _make_api_request(self, q: str, **kwargs) -> List[Dict[str, Any]]:
        """
        –û–±–µ–¥–∏–Ω–µ–Ω –ø–æ–º–æ—â–µ–Ω –º–µ—Ç–æ–¥ –∑–∞ –∏–∑–≤—ä—Ä—à–≤–∞–Ω–µ –Ω–∞ –∑–∞—è–≤–∫–∏ –∫—ä–º NewsAPI.
        –¢–æ–≤–∞ –ø—Ä–µ–º–∞—Ö–≤–∞ –¥—É–±–ª–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ –∫–æ–¥.
        """
        try:
            logging.info(f"Fetching news from NewsAPI with query: '{q}'")
            response = self.api.get_everything(q=q, language='en', **kwargs)
            
            if response.get('status') == 'error':
                logging.error(f"‚ùå NewsAPI Error: {response.get('message')}")
                return []

            return response.get('articles', [])
        except Exception as e:
            logging.error(f"‚ùå An exception occurred during NewsAPI request: {e}")
            return []

    # --- –¢–û–í–ê –ï –ù–û–í–ò–Ø–¢, –ü–û-–£–ú–ï–ù –ú–ï–¢–û–î ---
    def fetch_asset_news(self) -> List[Dict[str, Any]]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∏–∑–≤–ª–∏—á–∞ –Ω–æ–≤–∏–Ω–∏ –∑–∞ –≤—Å–∏—á–∫–∏ –∞–∫—Ç–∏–≤–∏, –¥–µ—Ñ–∏–Ω–∏—Ä–∞–Ω–∏ –≤ ASSETS_TO_TRACK.
        """
        all_asset_articles = []
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ "–æ—Ç –≤—á–µ—Ä–∞ –¥–æ –¥–Ω–µ—Å", –∑–∞ –¥–∞ —Å–∞ –∞–∫—Ç—É–∞–ª–Ω–∏ –Ω–æ–≤–∏–Ω–∏—Ç–µ
        yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
        today = datetime.now().strftime('%Y-%m-%d')
        
        # ASSETS_TO_TRACK –µ —Ä–µ—á–Ω–∏–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä {'bitcoin': 'btc-bitcoin', 'solana': 'sol-solana'}
        # –ù–∏–µ —â–µ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –∫–ª—é—á–æ–≤–µ—Ç–µ ('bitcoin', 'solana') –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ.
        for asset_name in ASSETS_TO_TRACK.keys():
            logging.info(f"Searching news for asset: {asset_name}...")
            # –¢—ä—Ä—Å–∏–º –ø–æ –∏–º–µ –Ω–∞ –∞–∫—Ç–∏–≤–∞ + "crypto", –∑–∞ –¥–∞ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–º–µ —à—É–º–∞
            query = f'"{asset_name}" AND "crypto"'
            
            articles_data = self._make_api_request(
                q=query,
                sort_by='publishedAt',
                page_size=5,  # 5 –Ω–æ–≤–∏–Ω–∏ –∑–∞ –≤—Å–µ–∫–∏ –∞–∫—Ç–∏–≤ —Å–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–∏
                from_param=yesterday,
                to=today
            )
            # –ó–∞–¥–∞–≤–∞–º–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è = –∏–º–µ—Ç–æ –Ω–∞ –∞–∫—Ç–∏–≤–∞
            processed = self._process_articles(articles_data, category=asset_name)
            all_asset_articles.extend(processed)
        
        logging.info(f"‚úÖ Fetched a total of {len(all_asset_articles)} articles for tracked assets.")
        return all_asset_articles

    def fetch_economic_news(self, keywords: List[str]) -> List[Dict[str, Any]]:
        query_string = ' OR '.join(f'"{k}"' for k in keywords)
        articles_data = self._make_api_request(
            q=query_string,
            sources=ECONOMIC_NEWS_SOURCES,
            sort_by='relevancy',
            page_size=20
        )
        return self._process_articles(articles_data, category='economic_event')
    
    # –¢–æ–∑–∏ –º–µ—Ç–æ–¥ –µ –ø—Ä–µ–º–∞—Ö–Ω–∞—Ç, –∑–∞—â–æ—Ç–æ fetch_asset_news –≥–æ –∑–∞–º–µ—Å—Ç–≤–∞ –∏ –µ –ø–æ-–¥–æ–±—ä—Ä
    # def fetch_general_news(self, keywords: List[str]) -> List[Dict[str, Any]]: ...

    def _process_articles(self, articles_data: List[Dict[str, Any]], category: Optional[str] = None) -> List[Dict[str, Any]]:
        processed = []
        for article in articles_data:
            processed_article = {
                'source': article.get('source', {}).get('name', 'N/A'),
                'title': article.get('title'),
                'url': article.get('url'),
                'published_at': article.get('publishedAt', 'N/A'),
                # –î–æ–±–∞–≤—è–º–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –¥–∏—Ä–µ–∫—Ç–Ω–æ —Ç—É–∫
                'category': category if category else 'general'
            }
            # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∑–∞ –≤–∞–ª–∏–¥–Ω–∏ –∑–∞–≥–ª–∞–≤–∏–µ, URL –∏ –ø—Ä–µ–º–∞—Ö–≤–∞–º–µ "[Removed]" –∑–∞–≥–ª–∞–≤–∏—è
            if all([processed_article['title'], 
                    processed_article['url'], 
                    processed_article['title'] != '[Removed]']):
                processed.append(processed_article)
        return processed