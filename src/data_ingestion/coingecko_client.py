# src/data_ingestion/coingecko_client.py
from pycoingecko import CoinGeckoAPI
from datetime import datetime
from typing import List, Dict, Any

class CoinGeckoClient:
    """
    –ö–ª–∞—Å –∑–∞ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –ø–∞–∑–∞—Ä–Ω–∏ –¥–∞–Ω–Ω–∏ –æ—Ç CoinGecko.
    """
    def __init__(self):
        self.api = CoinGeckoAPI()
        print("ü¶é CoinGecko Client initialized.")

    def fetch_historical_data(self, asset_id: str, days: int) -> List[Dict[str, Any]]:
        """
        –ò–∑–≤–ª–∏—á–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ –¥–∞–Ω–Ω–∏ (—Ü–µ–Ω–∞, –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è, –æ–±–µ–º) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ N –¥–Ω–∏.
        """
        print(f"ü¶é Fetching historical data for '{asset_id}' for the last {days} days...")

        try:
            chart_data = self.api.get_coin_market_chart_by_id(
                id=asset_id,
                vs_currency='usd',
                days=days,
                interval='daily' # –ò–∑–∏—Å–∫–≤–∞–º–µ –¥–Ω–µ–≤–Ω–∏ –¥–∞–Ω–Ω–∏
            )

            # –û–±—Ä–∞–±–æ—Ç–≤–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ, –∑–∞ –¥–∞ –≥–∏ –≤—ä—Ä–Ω–µ–º –≤ —É–¥–æ–±–µ–Ω —Ñ–æ—Ä–º–∞—Ç
            processed_data = self._process_chart_data(asset_id, chart_data)

            print(f"   -> Successfully processed {len(processed_data)} records for '{asset_id}'.")
            return processed_data

        except Exception as e:
            print(f"   -> ‚ùå Error fetching data from CoinGecko for '{asset_id}': {e}")
            return []

    def _process_chart_data(self, asset_id: str, chart_data: dict) -> List[Dict[str, Any]]:
        """–ü–æ–º–æ—â–µ–Ω –º–µ—Ç–æ–¥ –∑–∞ –∫–æ–º–±–∏–Ω–∏—Ä–∞–Ω–µ –Ω–∞ —Å–ø–∏—Å—ä—Ü–∏—Ç–µ –æ—Ç CoinGecko."""
        processed = []
        prices = chart_data.get('prices', [])
        market_caps = chart_data.get('market_caps', [])
        total_volumes = chart_data.get('total_volumes', [])

        # –£–≤–µ—Ä—è–≤–∞–º–µ —Å–µ, —á–µ –∏–º–∞–º–µ –¥–∞–Ω–Ω–∏ –≤—ä–≤ –≤—Å–∏—á–∫–∏ —Å–ø–∏—Å—ä—Ü–∏
        if not all([prices, market_caps, total_volumes]):
            return []

        for i in range(len(prices)):
            # –í—Ä–µ–º–µ—Ç–æ –∏–¥–≤–∞ –≤ –º–∏–ª–∏—Å–µ–∫—É–Ω–¥–∏, –ø—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–º–µ –≥–æ
            timestamp_ms = prices[i][0]
            date = datetime.fromtimestamp(timestamp_ms / 1000).strftime('%Y-%m-%d')

            # –î–æ–±–∞–≤—è–º–µ -1, –∞–∫–æ –Ω—è–∫–æ—è —Å—Ç–æ–π–Ω–æ—Å—Ç –ª–∏–ø—Å–≤–∞, –∑–∞ –¥–∞ –Ω–µ —Å–µ —á—É–ø–∏ –ø—Ä–æ–≥—Ä–∞–º–∞—Ç–∞
            daily_record = {
                'asset_id': asset_id,
                'date': date,
                'price': prices[i][1] if i < len(prices) else -1,
                'market_cap': market_caps[i][1] if i < len(market_caps) else -1,
                'total_volume': total_volumes[i][1] if i < len(total_volumes) else -1,
            }
            processed.append(daily_record)

        return processed

if __name__ == '__main__':
    print("--- Testing CoinGecko Client ---")
    client = CoinGeckoClient()
    # –¢–µ—Å—Ç–≤–∞–º–µ —Å bitcoin –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 5 –¥–Ω–∏
    btc_data = client.fetch_historical_data(asset_id='bitcoin', days=5)

    if btc_data:
        print(f"\nSuccessfully fetched {len(btc_data)} records.")
        print("Example record:")
        print(btc_data[-1]) # –ü–æ–∫–∞–∑–≤–∞–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—è –∑–∞–ø–∏—Å
    else:
        print("\nNo market data was fetched.")