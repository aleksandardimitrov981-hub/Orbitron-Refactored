import logging
import time
from typing import List, Dict, Any
import pandas as pd
from defillama2 import DefiLlama 

logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()] 
)

class DefiLlamaHandler:
    """
    –ö–ª–∞—Å –∑–∞ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ on-chain –¥–∞–Ω–Ω–∏ –æ—Ç DefiLlama API.
    """
    def __init__(self):
        try:
            self.llama = DefiLlama()
            logging.info("ü¶ô DefiLlama Handler initialized successfully.")
        except Exception as e:
            self.llama = None
            logging.error(f"‚ùå Failed to initialize DefiLlama client: {e}", exc_info=True)

    def get_chains_tvl(self, chain_names: List[str]) -> List[Dict[str, Any]]:
        """
        –ò–∑–≤–ª–∏—á–∞ Total Value Locked (TVL) –∑–∞ —Å–ø–∏—Å—ä–∫ –æ—Ç –∑–∞–¥–∞–¥–µ–Ω–∏ –±–ª–æ–∫—á–µ–π–Ω –º—Ä–µ–∂–∏.
        """
        if not self.llama:
            logging.error("DefiLlama client is not initialized.")
            return []

        all_chains_tvl = []
        logging.info(f"Fetching TVL data for chains: {chain_names}")
        
        try:
            current_timestamp = int(time.time())
            
            # --- –ï–¢–û –Ø –§–ò–ù–ê–õ–ù–ê–¢–ê –ö–û–†–ï–ö–¶–ò–Ø ---
            # –ò—Ç–µ—Ä–∏—Ä–∞–º–µ –ø—Ä–µ–∑ –≤—Å—è–∫–∞ –º—Ä–µ–∂–∞ –∏ –ø—Ä–∞–≤–∏–º –æ—Ç–¥–µ–ª–Ω–∞ –∑–∞—è–≤–∫–∞ —Å –ø—Ä–∞–≤–∏–ª–Ω–∏—è –º–µ—Ç–æ–¥
            for chain in chain_names:
                logging.info(f"  -> Fetching TVL for {chain}...")
                
                # –ò–ó–ü–û–õ–ó–í–ê–ú–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –û–¢ –ì–†–ï–®–ö–ê–¢–ê –ú–ï–¢–û–î: get_chain_hist_tvl
                response_df = self.llama.get_chain_hist_tvl(chain=chain)

                if isinstance(response_df, pd.DataFrame) and not response_df.empty:
                    # –í–∑–∏–º–∞–º–µ –ø–æ—Å–ª–µ–¥–Ω–∞—Ç–∞ (–Ω–∞–π-–∞–∫—Ç—É–∞–ª–Ω–∞—Ç–∞) —Å—Ç–æ–π–Ω–æ—Å—Ç –∑–∞ TVL
                    latest_tvl_value = response_df['tvl'].iloc[-1]
                    
                    chain_data = {
                        'chain': chain,
                        'tvl': float(latest_tvl_value),
                        'timestamp': current_timestamp
                    }
                    all_chains_tvl.append(chain_data)
                    # –ú–∞–ª–∫–∞ –ø–∞—É–∑–∞, –∑–∞ –¥–∞ –Ω–µ —Ç–æ–≤–∞—Ä–∏–º API-—Ç–æ
                    time.sleep(0.2) 
                else:
                    logging.warning(f"  -> No TVL data returned for {chain}")
            # --- –ö–†–ê–ô –ù–ê –ö–û–†–ï–ö–¶–ò–Ø–¢–ê ---

            if all_chains_tvl:
                logging.info(f"‚úÖ Successfully processed TVL data for {len(all_chains_tvl)} chains.")
            else:
                logging.warning("API calls were made, but processing resulted in an empty list.")
                
            return all_chains_tvl

        except Exception as e:
            logging.error(f"‚ùå An exception occurred while fetching TVL data from DefiLlama: {e}", exc_info=True)
            return []

# --- –¢–µ—Å—Ç–æ–≤–∏—è—Ç –±–ª–æ–∫ –æ—Å—Ç–∞–≤–∞ —Å—ä—â–∏—è—Ç ---
if __name__ == '__main__':
    logging.info("--- Testing DefiLlamaHandler ---")
    
    chains_to_track = ["Ethereum", "Solana", "Arbitrum", "Polygon"]
    
    handler = DefiLlamaHandler()
    tvl_data = handler.get_chains_tvl(chains_to_track)

    if tvl_data:
        print("\nSuccessfully fetched TVL data:")
        for data in tvl_data:
            tvl_in_billions = data['tvl'] / 1_000_000_000
            print(f"  - Chain: {data['chain']}, TVL: ${tvl_in_billions:.2f}B")
    else:
        print("\nCould not fetch TVL data. Check the logs above for errors.")