# src/dashboard/app.py
import sys
import os
import streamlit as st
import pandas as pd

# --- –¢–†–ò–ö–™–¢ –ó–ê –ü–†–ê–í–ò–õ–ù–ò–¢–ï –ò–ú–ü–û–†–¢–ò ---
project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.append(project_root)

# --- –ù–æ–≤–∏—Ç–µ, –ø–æ-—á–∏—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∏ ---
from config import ASSETS_TO_TRACK
from src.database.database_manager import DatabaseManager

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ ---
st.set_page_config(layout="wide", page_title="Orbitron AI Dashboard")
st.title("üöÄ ORBITRON AI - –ê–Ω–∞–ª–∏—Ç–∏—á–Ω–æ –¢–∞–±–ª–æ")

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–º–µ —Ä–µ—á–Ω–∏–∫–∞ —Å –∞–∫—Ç–∏–≤–∏ –≤ —Å–ø–∏—Å—ä–∫ –∑–∞ —Å–µ–ª–µ–∫—Ü–∏—è—Ç–∞
ASSET_NAMES = list(ASSETS_TO_TRACK.keys())

@st.cache_data(ttl=600)  # –ö–µ—à–∏—Ä–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ 10 –º–∏–Ω—É—Ç–∏
def load_data():
    """–ó–∞—Ä–µ–∂–¥–∞ –≤—Å–∏—á–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏ –∏ –ø–∞–∑–∞—Ä–Ω–∏ –¥–∞–Ω–Ω–∏."""
    db = DatabaseManager()
    news_list = db.get_all_analyzed_articles()
    market_data_list = db.get_all_market_data()
    
    news_df = pd.DataFrame(news_list)
    market_df = pd.DataFrame(market_data_list)
    
    # –û–±—Ä–∞–±–æ—Ç–≤–∞–º–µ –¥–∞—Ç–∏—Ç–µ
    if not market_df.empty:
        market_df['date'] = pd.to_datetime(market_df['date'])
    
    return news_df, market_df

# --- –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ ---
news_data, market_data = load_data()

if market_data.empty:
    st.warning("–ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ –ø–∞–∑–∞—Ä–Ω–∏ –¥–∞–Ω–Ω–∏. –°—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ `scripts/run_pipeline.py`, –∑–∞ –¥–∞ —Å—ä–±–µ—Ä–µ—Ç–µ –¥–∞–Ω–Ω–∏.")
    st.stop()

# --- –ö–æ–Ω—Ç—Ä–æ–ª–∏ –≤ —Å—Ç—Ä–∞–Ω–∏—á–Ω–∞—Ç–∞ –ª–µ–Ω—Ç–∞ ---

# V V V –ï–¢–û –¢–£–ö –ï –î–û–ë–ê–í–ö–ê–¢–ê –ó–ê –õ–û–ì–û–¢–û V V V
st.sidebar.image("assets/logo.png", use_container_width=True)
# ^ ^ ^ –ï–¢–û –¢–£–ö –ï –î–û–ë–ê–í–ö–ê–¢–ê –ó–ê –õ–û–ì–û–¢–û ^ ^ ^

st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –ê–Ω–∞–ª–∏–∑–∞")
selected_asset_name = st.sidebar.selectbox("–ò–∑–±–µ—Ä–∏ –ê–∫—Ç–∏–≤:", ASSET_NAMES)
selected_asset_id = ASSETS_TO_TRACK[selected_asset_name]

# --- –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ ---
asset_market_data = market_data[market_data['asset_id'] == selected_asset_id].copy()
asset_news_data = news_data[news_data['title'].str.contains(selected_asset_name.split('-')[0], case=False, na=False)].copy()

if asset_market_data.empty:
    st.warning(f"–ù—è–º–∞ –ø–∞–∑–∞—Ä–Ω–∏ –¥–∞–Ω–Ω–∏ –∑–∞ '{selected_asset_name}'.")
    st.stop()

# --- –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∫–ª—é—á–æ–≤–∏ –º–µ—Ç—Ä–∏–∫–∏ ---
st.header(f"–ö–ª—é—á–æ–≤–∏ –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞ {selected_asset_name.capitalize()}")
asset_market_data.sort_values('date', inplace=True, ascending=False)
latest_data = asset_market_data.iloc[0]

price_change_str = "N/A"
if len(asset_market_data) > 1:
    previous_data = asset_market_data.iloc[1]
    price_change = latest_data['price'] - previous_data['price']
    price_change_percent = (price_change / previous_data['price']) * 100 if previous_data['price'] != 0 else 0
    price_change_str = f"{price_change:,.4f} ({price_change_percent:.2f}%)"

col1, col2, col3 = st.columns(3)
col1.metric("–ü–æ—Å–ª–µ–¥–Ω–∞ –¶–µ–Ω–∞ (USD)", f"${latest_data['price']:,.4f}", price_change_str)
col2.metric("–ü–∞–∑–∞—Ä–Ω–∞ –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è", f"${latest_data['market_cap']:,.0f}")
col3.metric("–û–±–µ–º –∑–∞ 24—á", f"${latest_data['total_volume']:,.0f}")
st.markdown("---")

# --- AI –û–ë–û–ë–©–ï–ù –ê–ù–ê–õ–ò–ó ---
st.header(f"ü§ñ AI –û–±–æ–±—â–µ–Ω –ê–Ω–∞–ª–∏–∑ –∑–∞ {selected_asset_name.capitalize()}")

if asset_news_data.empty:
    st.info("–ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ AI –∞–Ω–∞–ª–∏–∑–∏ –∑–∞ —Ç–æ–∑–∏ –∞–∫—Ç–∏–≤.")
else:
    sentiment_counts = asset_news_data['sentiment'].value_counts()
    pos_count = sentiment_counts.get("Positive", 0)
    neg_count = sentiment_counts.get("Negative", 0)
    neu_count = sentiment_counts.get("Neutral", 0)

    st.subheader("–†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è—Ç–∞")
    scol1, scol2, scol3 = st.columns(3)
    scol1.metric("üü¢ –ü–æ–∑–∏—Ç–∏–≤–Ω–∏ –ù–æ–≤–∏–Ω–∏", pos_count)
    scol2.metric("üî¥ –ù–µ–≥–∞—Ç–∏–≤–Ω–∏ –ù–æ–≤–∏–Ω–∏", neg_count)
    scol3.metric("‚ö™ –ù–µ—É—Ç—Ä–∞–ª–Ω–∏ –ù–æ–≤–∏–Ω–∏", neu_count)

    st.subheader("AI –û–±–æ—Å–Ω–æ–≤–∫–∞ –Ω–∞ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è—Ç–∞")
    total_news = pos_count + neg_count
    if total_news > 0:
        pos_percentage = (pos_count / total_news) * 100
        if pos_percentage > 65:
            summary_text = f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ—Ç–æ –µ **—Å–∏–ª–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ**. –ù–∞–¥ {int(pos_percentage)}% –æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏—Ç–µ –Ω–æ–≤–∏–Ω–∏ —Å–æ—á–∞—Ç –∫—ä–º –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∏ —Ä–∞–∑–≤–∏—Ç–∏—è."
            st.success(summary_text)
        elif pos_percentage > 40:
            summary_text = f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ—Ç–æ –µ **–ø—Ä–µ–¥–∏–º–Ω–æ –Ω–µ—É—Ç—Ä–∞–ª–Ω–æ —Å –ª–µ–∫ –ø–æ–∑–∏—Ç–∏–≤–µ–Ω —É–∫–ª–æ–Ω**. –ù–æ–≤–∏–Ω–∏—Ç–µ —Å–∞ —Å–º–µ—Å–µ–Ω–∏, –Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ç–µ –ø—Ä–µ–æ–±–ª–∞–¥–∞–≤–∞—Ç."
            st.info(summary_text)
        else:
            summary_text = f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ—Ç–æ –µ **–ø—Ä–µ–¥–∏–º–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ**. –ü–æ–≤–µ—á–µ—Ç–æ –Ω–æ–≤–∏–Ω–∏ –¥–∏—Å–∫—É—Ç–∏—Ä–∞—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–Ω–∏ —Ä–∏—Å–∫–æ–≤–µ –∏–ª–∏ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∏ —Å—ä–±–∏—Ç–∏—è."
            st.warning(summary_text)
    else:
        st.info("–ù—è–º–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏ –∏–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏ –Ω–æ–≤–∏–Ω–∏ –∑–∞ —Ñ–æ—Ä–º–∏—Ä–∞–Ω–µ –Ω–∞ —è—Å–Ω–∞ –æ–±–æ—Å–Ω–æ–≤–∫–∞.")

    st.subheader("–ö–ª—é—á–æ–≤–∏ —Ç–µ–º–∏ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ –Ω–æ–≤–∏–Ω–∏")
    asset_news_data['published_at'] = pd.to_datetime(asset_news_data['published_at'], errors='coerce', utc=True)
    recent_news = asset_news_data.sort_values(by='published_at', ascending=False).head(5)
    
    for index, row in recent_news.iterrows():
        st.markdown(f"- **{row['sentiment']}**: *{row['summary']}*")

# --- –°–ï–ö–¶–ò–Ø –° –î–ï–¢–ê–ô–õ–ù–ò –ù–û–í–ò–ù–ò ---
st.markdown("---")
st.header("–í—Å–∏—á–∫–∏ —Å–≤—ä—Ä–∑–∞–Ω–∏ –Ω–æ–≤–∏–Ω–∏")
if not asset_news_data.empty:
    sorted_news = asset_news_data.sort_values(by='published_at', ascending=False)
    for index, row in sorted_news.head(20).iterrows():
        with st.expander(f"**{row['title']}** (–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {row['sentiment']})"):
            st.markdown(f"**AI –†–µ–∑—é–º–µ:** *{row['summary']}*")
            st.markdown(f"**AI –û–±–æ—Å–Ω–æ–≤–∫–∞:** {row['reasoning']}")
            st.markdown(f"**AI –§–∞–∫—Ç–æ—Ä–∏:** {row['investment_factors']}")
            st.markdown(f"**–ò–∑—Ç–æ—á–Ω–∏–∫:** {row['source']} | **–ü—É–±–ª–∏–∫—É–≤–∞–Ω–æ –Ω–∞:** {pd.to_datetime(row['published_at']).strftime('%Y-%m-%d %H:%M')}")
            st.markdown(f"[–ü—Ä–æ—á–µ—Ç–∏ —Ü—è–ª–∞—Ç–∞ —Å—Ç–∞—Ç–∏—è]({row['url']})")
else:
    st.write("–ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –Ω–æ–≤–∏–Ω–∏ –∑–∞ —Ç–æ–∑–∏ –∞–∫—Ç–∏–≤.")